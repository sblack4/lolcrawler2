swagger: '2.0'
info:
  title: 'Riot API'
  description: "\nOpenAPI/Swagger version of the [Riot API](https://developer.riotgames.com/). Automatically generated daily.\n## Download OpenAPI Spec File\nThe following versions of the Riot API spec file are available:\n- `openapi-3.0.0.json` ([download file](../openapi-3.0.0.json), [view ui](?openapi-3.0.0.json))\n- `openapi-3.0.0.min.json` ([download file](../openapi-3.0.0.min.json), [view ui](?openapi-3.0.0.min.json))\n- `openapi-3.0.0.yml` ([download file](../openapi-3.0.0.yml), [view ui](?openapi-3.0.0.yml))\n- `openapi-3.0.0.min.yml` ([download file](../openapi-3.0.0.min.yml), [view ui](?openapi-3.0.0.min.yml))\n- `swaggerspec-2.0.json` ([download file](../swaggerspec-2.0.json), [view ui](?swaggerspec-2.0.json))\n- `swaggerspec-2.0.min.json` ([download file](../swaggerspec-2.0.min.json), [view ui](?swaggerspec-2.0.min.json))\n- `swaggerspec-2.0.yml` ([download file](../swaggerspec-2.0.yml), [view ui](?swaggerspec-2.0.yml))\n- `swaggerspec-2.0.min.yml` ([download file](../swaggerspec-2.0.min.yml), [view ui](?swaggerspec-2.0.min.yml))\n## Source Code\nSource code on [GitHub](https://github.com/MingweiSamuel/riotapi-schema). Pull requests welcome!\n## Automatically Generated\nRebuilt on [Travis CI](https://travis-ci.org/MingweiSamuel/riotapi-schema/builds) daily.\n***\n"
  termsOfService: 'https://developer.riotgames.com/terms-and-conditions.html'
  version: e04eb30617c277f132dbf0eb461adc88570eda27
host: na1.api.riotgames.com
x-host-platform:
  - br1
  - eun1
  - euw1
  - jp1
  - kr
  - la1
  - la2
  - na1
  - oc1
  - tr1
  - ru
  - pbe1
schemes:
  - https
paths:
  '/lol/champion-mastery/v3/champion-masteries/by-summoner/{summonerId}':
    get:
      tags:
        - champion-mastery-v3
      summary: 'Get all champion mastery entries sorted by number of champion points descending,'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#champion-mastery-v3/GET_getAllChampionMasteries'
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/champion-mastery-v3.ChampionMasteryDTO'
              x-type: ChampionMasteryDTO
            x-type: 'List[ChampionMasteryDTO]'
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: champion-mastery-v3.getAllChampionMasteries
      description: 'Get all champion mastery entries sorted by number of champion points descending,'
      parameters:
        -
          name: summonerId
          in: path
          required: true
          description: 'Summoner ID associated with the player'
          type: integer
          format: int64
          x-type: long
      produces:
        - application/json
  '/lol/champion-mastery/v3/champion-masteries/by-summoner/{summonerId}/by-champion/{championId}':
    get:
      tags:
        - champion-mastery-v3
      summary: 'Get a champion mastery by player ID and champion ID.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#champion-mastery-v3/GET_getChampionMastery'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/champion-mastery-v3.ChampionMasteryDTO'
            x-type: ChampionMasteryDTO
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: champion-mastery-v3.getChampionMastery
      description: 'Get a champion mastery by player ID and champion ID.'
      parameters:
        -
          name: championId
          in: path
          required: true
          description: 'Champion ID to retrieve Champion Mastery for'
          type: integer
          format: int64
          x-type: long
        -
          name: summonerId
          in: path
          required: true
          description: 'Summoner ID associated with the player'
          type: integer
          format: int64
          x-type: long
      produces:
        - application/json
  '/lol/champion-mastery/v3/scores/by-summoner/{summonerId}':
    get:
      tags:
        - champion-mastery-v3
      summary: 'Get a player''s total champion mastery score, which is the sum of individual champion mastery levels.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#champion-mastery-v3/GET_getChampionMasteryScore'
      responses:
        '200':
          description: Success
          schema:
            type: integer
            format: int32
            x-type: int
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: champion-mastery-v3.getChampionMasteryScore
      description: 'Get a player''s total champion mastery score, which is the sum of individual champion mastery levels.'
      parameters:
        -
          name: summonerId
          in: path
          required: true
          description: 'Summoner ID associated with the player'
          type: integer
          format: int64
          x-type: long
      produces:
        - application/json
  /lol/platform/v3/champion-rotations:
    get:
      tags:
        - champion-v3
      summary: 'Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/champion-v3.ChampionInfo'
            x-type: ChampionInfo
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: champion-v3.getChampionInfo
      description: 'Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)'
      produces:
        - application/json
  '/lol/league/v3/challengerleagues/by-queue/{queue}':
    get:
      tags:
        - league-v3
      summary: 'Get the challenger league for given queue.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#league-v3/GET_getChallengerLeague'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/league-v3.LeagueListDTO'
            x-type: LeagueListDTO
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: league-v3.getChallengerLeague
      description: 'Get the challenger league for given queue.'
      parameters:
        -
          name: queue
          in: path
          required: true
          type: string
          x-type: string
          enum:
            - RANKED_SOLO_5x5
            - RANKED_FLEX_SR
            - RANKED_FLEX_TT
          description: ""
      produces:
        - application/json
  '/lol/league/v3/leagues/{leagueId}':
    get:
      tags:
        - league-v3
      summary: 'Get league with given ID, including inactive entries.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#league-v3/GET_getLeagueById'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/league-v3.LeagueListDTO'
            x-type: LeagueListDTO
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: league-v3.getLeagueById
      description: 'Get league with given ID, including inactive entries.'
      parameters:
        -
          name: leagueId
          in: path
          required: true
          description: 'The UUID of the league.'
          type: string
          x-type: string
      produces:
        - application/json
  '/lol/league/v3/masterleagues/by-queue/{queue}':
    get:
      tags:
        - league-v3
      summary: 'Get the master league for given queue.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#league-v3/GET_getMasterLeague'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/league-v3.LeagueListDTO'
            x-type: LeagueListDTO
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: league-v3.getMasterLeague
      description: 'Get the master league for given queue.'
      parameters:
        -
          name: queue
          in: path
          required: true
          type: string
          x-type: string
          enum:
            - RANKED_SOLO_5x5
            - RANKED_FLEX_SR
            - RANKED_FLEX_TT
          description: ""
      produces:
        - application/json
  '/lol/league/v3/positions/by-summoner/{summonerId}':
    get:
      tags:
        - league-v3
      summary: 'Get league positions in all queues for a given summoner ID.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#league-v3/GET_getAllLeaguePositionsForSummoner'
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/league-v3.LeaguePositionDTO'
              x-type: LeaguePositionDTO
            x-type: 'Set[LeaguePositionDTO]'
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: league-v3.getAllLeaguePositionsForSummoner
      description: 'Get league positions in all queues for a given summoner ID.'
      parameters:
        -
          name: summonerId
          in: path
          required: true
          type: integer
          format: int64
          x-type: long
          description: ""
      produces:
        - application/json
  /lol/status/v3/shard-data:
    get:
      tags:
        - lol-status-v3
      summary: 'Get League of Legends status for the given shard.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/lol-status-v3.ShardStatus'
            x-type: ShardStatus
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: lol-status-v3.getShardData
      x-app-rate-limit-excluded: true
      description: "Get League of Legends status for the given shard.\n## Rate Limit Notes\nRequests to this API are not counted against the application Rate Limits."
      produces:
        - application/json
  '/lol/match/v3/matches/by-tournament-code/{tournamentCode}/ids':
    get:
      tags:
        - match-v3
      summary: 'Get match IDs by tournament code.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchIdsByTournamentCode'
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              type: integer
              format: int64
              x-type: long
            x-type: 'List[long]'
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: match-v3.getMatchIdsByTournamentCode
      description: 'Get match IDs by tournament code.'
      parameters:
        -
          name: tournamentCode
          in: path
          required: true
          description: 'The tournament code.'
          type: string
          x-type: string
      produces:
        - application/json
  '/lol/match/v3/matches/{matchId}':
    get:
      tags:
        - match-v3
      summary: 'Get match by match ID.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#match-v3/GET_getMatch'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/match-v3.MatchDto'
            x-type: MatchDto
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: match-v3.getMatch
      description: 'Get match by match ID.'
      parameters:
        -
          name: matchId
          in: path
          required: true
          description: 'The match ID.'
          type: integer
          format: int64
          x-type: long
      produces:
        - application/json
  '/lol/match/v3/matches/{matchId}/by-tournament-code/{tournamentCode}':
    get:
      tags:
        - match-v3
      summary: 'Get match by match ID and tournament code.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchByTournamentCode'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/match-v3.MatchDto'
            x-type: MatchDto
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: match-v3.getMatchByTournamentCode
      description: 'Get match by match ID and tournament code.'
      parameters:
        -
          name: matchId
          in: path
          required: true
          description: 'The match ID.'
          type: integer
          format: int64
          x-type: long
        -
          name: tournamentCode
          in: path
          required: true
          description: 'The tournament code.'
          type: string
          x-type: string
      produces:
        - application/json
  '/lol/match/v3/matchlists/by-account/{accountId}':
    get:
      tags:
        - match-v3
      summary: 'Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchlist'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/match-v3.MatchlistDto'
            x-type: MatchlistDto
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: match-v3.getMatchlist
      description: "Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.\n## Implementation Notes\nA number of optional parameters are provided for filtering. It is up to the caller to ensure that the combination of filter parameters provided is valid for the requested account, otherwise, no matches may be returned.\n\nIf beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.\n\nIf beginTime is specified, but not endTime, then these parameters are ignored. If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned."
      parameters:
        -
          name: accountId
          in: path
          required: true
          description: 'The account ID.'
          type: integer
          format: int64
          x-type: long
        -
          name: endTime
          in: query
          required: false
          description: 'The end time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then these parameters are ignored. If endTime is specified, but not beginTime, then beginTime defaults to the start of the account''s match history. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.'
          type: integer
          format: int64
          x-type: long
        -
          name: beginIndex
          in: query
          required: false
          description: 'The begin index to use for filtering matchlist.  If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.'
          type: integer
          format: int32
          x-type: int
        -
          name: beginTime
          in: query
          required: false
          description: 'The begin time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then these parameters are ignored. If endTime is specified, but not beginTime, then beginTime defaults to the start of the account''s match history. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.'
          type: integer
          format: int64
          x-type: long
        -
          name: champion
          in: query
          required: false
          description: 'Set of champion IDs for filtering the matchlist.'
          type: array
          items:
            type: integer
            format: int32
            x-type: int
          x-type: 'Set[int]'
        -
          name: endIndex
          in: query
          required: false
          description: 'The end index to use for filtering matchlist. If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.'
          type: integer
          format: int32
          x-type: int
        -
          name: queue
          in: query
          required: false
          description: 'Set of queue IDs for filtering the matchlist.'
          type: array
          items:
            type: integer
            format: int32
            x-type: int
          x-type: 'Set[int]'
        -
          name: season
          in: query
          required: false
          description: 'Set of season IDs for filtering the matchlist.'
          type: array
          items:
            type: integer
            format: int32
            x-type: int
          x-type: 'Set[int]'
      produces:
        - application/json
  '/lol/match/v3/timelines/by-match/{matchId}':
    get:
      tags:
        - match-v3
      summary: 'Get match timeline by match ID.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchTimeline'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/match-v3.MatchTimelineDto'
            x-type: MatchTimelineDto
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: match-v3.getMatchTimeline
      description: "Get match timeline by match ID.\n## Implementation Notes\nNot all matches have timeline data."
      parameters:
        -
          name: matchId
          in: path
          required: true
          description: 'The match ID.'
          type: integer
          format: int64
          x-type: long
      produces:
        - application/json
  '/lol/spectator/v3/active-games/by-summoner/{summonerId}':
    get:
      tags:
        - spectator-v3
      summary: 'Get current game information for the given summoner ID.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#spectator-v3/GET_getCurrentGameInfoBySummoner'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/spectator-v3.CurrentGameInfo'
            x-type: CurrentGameInfo
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: spectator-v3.getCurrentGameInfoBySummoner
      description: 'Get current game information for the given summoner ID.'
      parameters:
        -
          name: summonerId
          in: path
          required: true
          description: 'The ID of the summoner.'
          type: integer
          format: int64
          x-type: long
      produces:
        - application/json
  /lol/spectator/v3/featured-games:
    get:
      tags:
        - spectator-v3
      summary: 'Get list of featured games.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#spectator-v3/GET_getFeaturedGames'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/spectator-v3.FeaturedGames'
            x-type: FeaturedGames
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: spectator-v3.getFeaturedGames
      description: 'Get list of featured games.'
      produces:
        - application/json
  '/lol/summoner/v3/summoners/by-account/{accountId}':
    get:
      tags:
        - summoner-v3
      summary: 'Get a summoner by account ID.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#summoner-v3/GET_getByAccountId'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/summoner-v3.SummonerDTO'
            x-type: SummonerDTO
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: summoner-v3.getByAccountId
      description: 'Get a summoner by account ID.'
      parameters:
        -
          name: accountId
          in: path
          required: true
          type: integer
          format: int64
          x-type: long
          description: ""
      produces:
        - application/json
  '/lol/summoner/v3/summoners/by-name/{summonerName}':
    get:
      tags:
        - summoner-v3
      summary: 'Get a summoner by summoner name.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#summoner-v3/GET_getBySummonerName'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/summoner-v3.SummonerDTO'
            x-type: SummonerDTO
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: summoner-v3.getBySummonerName
      description: 'Get a summoner by summoner name.'
      parameters:
        -
          name: summonerName
          in: path
          required: true
          description: 'Summoner Name'
          type: string
          x-type: string
      produces:
        - application/json
  '/lol/summoner/v3/summoners/{summonerId}':
    get:
      tags:
        - summoner-v3
      summary: 'Get a summoner by summoner ID.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#summoner-v3/GET_getBySummonerId'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/summoner-v3.SummonerDTO'
            x-type: SummonerDTO
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: summoner-v3.getBySummonerId
      description: 'Get a summoner by summoner ID.'
      parameters:
        -
          name: summonerId
          in: path
          required: true
          description: 'Summoner ID'
          type: integer
          format: int64
          x-type: long
      produces:
        - application/json
  '/lol/platform/v3/third-party-code/by-summoner/{summonerId}':
    get:
      tags:
        - third-party-code-v3
      summary: 'Get third party code for a given summoner ID.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#third-party-code-v3/GET_getThirdPartyCodeBySummonerId'
      responses:
        '200':
          description: Success
          schema:
            type: string
            x-type: String
        '400':
          description: 'Bad request'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: third-party-code-v3.getThirdPartyCodeBySummonerId
      description: 'Get third party code for a given summoner ID.'
      parameters:
        -
          name: summonerId
          in: path
          required: true
          type: integer
          format: int64
          x-type: long
          description: ""
      produces:
        - application/json
  /lol/tournament-stub/v3/codes:
    post:
      tags:
        - tournament-stub-v3
      summary: 'Create a mock tournament code for the given tournament.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#tournament-stub-v3/POST_createTournamentCode'
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              type: string
              x-type: string
            x-type: 'List[string]'
        '400':
          description: 'Bad request'
        '401':
          description: 'Invalid API key specified'
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: tournament-stub-v3.createTournamentCode
      description: 'Create a mock tournament code for the given tournament.'
      parameters:
        -
          name: count
          in: query
          required: false
          description: 'The number of codes to create (max 1000)'
          type: integer
          format: int32
          x-type: int
        -
          name: tournamentId
          in: query
          required: true
          description: 'The tournament ID'
          type: integer
          format: int64
          x-type: long
        -
          required: true
          description: 'Metadata for the generated code'
          schema:
            $ref: '#/definitions/tournament-stub-v3.TournamentCodeParameters'
            x-type: TournamentCodeParameters
          in: body
          name: TournamentCodeParameters
      produces:
        - application/json
      consumes:
        - application/json
  '/lol/tournament-stub/v3/lobby-events/by-code/{tournamentCode}':
    get:
      tags:
        - tournament-stub-v3
      summary: 'Gets a mock list of lobby events by tournament code.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#tournament-stub-v3/GET_getLobbyEventsByCode'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/tournament-stub-v3.LobbyEventDTOWrapper'
            x-type: LobbyEventDTOWrapper
        '400':
          description: 'Bad request'
        '401':
          description: 'Invalid API key specified'
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: tournament-stub-v3.getLobbyEventsByCode
      description: 'Gets a mock list of lobby events by tournament code.'
      parameters:
        -
          name: tournamentCode
          in: path
          required: true
          description: 'The short code to look up lobby events for'
          type: string
          x-type: string
      produces:
        - application/json
  /lol/tournament-stub/v3/providers:
    post:
      tags:
        - tournament-stub-v3
      summary: 'Creates a mock tournament provider and returns its ID.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#tournament-stub-v3/POST_registerProviderData'
      responses:
        '200':
          description: Success
          schema:
            type: integer
            format: int32
            x-type: int
        '400':
          description: 'Bad request'
        '401':
          description: 'Invalid API key specified'
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: tournament-stub-v3.registerProviderData
      description: "Creates a mock tournament provider and returns its ID.\n## Implementation Notes\nProviders will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work."
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          required: true
          description: 'The provider definition.'
          schema:
            $ref: '#/definitions/tournament-stub-v3.ProviderRegistrationParameters'
            x-type: ProviderRegistrationParameters
          in: body
          name: ProviderRegistrationParameters
  /lol/tournament-stub/v3/tournaments:
    post:
      tags:
        - tournament-stub-v3
      summary: 'Creates a mock tournament and returns its ID.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#tournament-stub-v3/POST_registerTournament'
      responses:
        '200':
          description: Success
          schema:
            type: integer
            format: int32
            x-type: int
        '400':
          description: 'Bad request'
        '401':
          description: 'Invalid API key specified'
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: tournament-stub-v3.registerTournament
      description: 'Creates a mock tournament and returns its ID.'
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          required: true
          description: 'The tournament definition.'
          schema:
            $ref: '#/definitions/tournament-stub-v3.TournamentRegistrationParameters'
            x-type: TournamentRegistrationParameters
          in: body
          name: TournamentRegistrationParameters
  /lol/tournament/v3/codes:
    post:
      tags:
        - tournament-v3
      summary: 'Create a tournament code for the given tournament.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#tournament-v3/POST_createTournamentCode'
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              type: string
              x-type: string
            x-type: 'List[string]'
        '400':
          description: 'Bad request'
        '401':
          description: 'Invalid API key specified'
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: tournament-v3.createTournamentCode
      description: 'Create a tournament code for the given tournament.'
      parameters:
        -
          name: count
          in: query
          required: false
          description: 'The number of codes to create (max 1000)'
          type: integer
          format: int32
          x-type: int
        -
          name: tournamentId
          in: query
          required: true
          description: 'The tournament ID'
          type: integer
          format: int64
          x-type: long
        -
          required: true
          description: 'Metadata for the generated code'
          schema:
            $ref: '#/definitions/tournament-v3.TournamentCodeParameters'
            x-type: TournamentCodeParameters
          in: body
          name: TournamentCodeParameters
      produces:
        - application/json
      consumes:
        - application/json
  '/lol/tournament/v3/codes/{tournamentCode}':
    put:
      tags:
        - tournament-v3
      summary: 'Update the pick type, map, spectator type, or allowed summoners for a code.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#tournament-v3/PUT_updateCode'
      responses:
        '200':
          description: Success
        '400':
          description: 'Bad request'
        '401':
          description: 'Invalid API key specified'
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: tournament-v3.updateCode
      description: 'Update the pick type, map, spectator type, or allowed summoners for a code.'
      parameters:
        -
          name: tournamentCode
          in: path
          required: true
          description: 'The tournament code to update'
          type: string
          x-type: string
        -
          required: false
          description: 'The fields to update'
          schema:
            $ref: '#/definitions/tournament-v3.TournamentCodeUpdateParameters'
            x-type: TournamentCodeUpdateParameters
          in: body
          name: TournamentCodeUpdateParameters
      produces:
        - application/json
      consumes:
        - application/json
    get:
      tags:
        - tournament-v3
      summary: 'Returns the tournament code DTO associated with a tournament code string.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#tournament-v3/GET_getTournamentCode'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/tournament-v3.TournamentCodeDTO'
            x-type: TournamentCodeDTO
        '400':
          description: 'Bad request'
        '401':
          description: 'Invalid API key specified'
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: tournament-v3.getTournamentCode
      description: 'Returns the tournament code DTO associated with a tournament code string.'
      parameters:
        -
          name: tournamentCode
          in: path
          required: true
          description: 'The tournament code string.'
          type: string
          x-type: string
      produces:
        - application/json
  '/lol/tournament/v3/lobby-events/by-code/{tournamentCode}':
    get:
      tags:
        - tournament-v3
      summary: 'Gets a list of lobby events by tournament code.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#tournament-v3/GET_getLobbyEventsByCode'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/tournament-v3.LobbyEventDTOWrapper'
            x-type: LobbyEventDTOWrapper
        '400':
          description: 'Bad request'
        '401':
          description: 'Invalid API key specified'
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: tournament-v3.getLobbyEventsByCode
      description: 'Gets a list of lobby events by tournament code.'
      parameters:
        -
          name: tournamentCode
          in: path
          required: true
          description: 'The short code to look up lobby events for'
          type: string
          x-type: string
      produces:
        - application/json
  /lol/tournament/v3/providers:
    post:
      tags:
        - tournament-v3
      summary: 'Creates a tournament provider and returns its ID.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#tournament-v3/POST_registerProviderData'
      responses:
        '200':
          description: Success
          schema:
            type: integer
            format: int32
            x-type: int
        '400':
          description: 'Bad request'
        '401':
          description: 'Invalid API key specified'
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: tournament-v3.registerProviderData
      description: "Creates a tournament provider and returns its ID.\n## Implementation Notes\nProviders will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work."
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          required: true
          description: 'The provider definition.'
          schema:
            $ref: '#/definitions/tournament-v3.ProviderRegistrationParameters'
            x-type: ProviderRegistrationParameters
          in: body
          name: ProviderRegistrationParameters
  /lol/tournament/v3/tournaments:
    post:
      tags:
        - tournament-v3
      summary: 'Creates a tournament and returns its ID.'
      externalDocs:
        description: 'Official API Reference'
        url: 'https://developer.riotgames.com/api-methods/#tournament-v3/POST_registerTournament'
      responses:
        '200':
          description: Success
          schema:
            type: integer
            format: int32
            x-type: int
        '400':
          description: 'Bad request'
        '401':
          description: 'Invalid API key specified'
        '403':
          description: Forbidden
        '404':
          description: 'Data not found'
        '405':
          description: 'Method not allowed'
        '415':
          description: 'Unsupported media type'
        '422':
          description: 'Player exists, but hasn''t played since match history collection began'
        '429':
          description: 'Rate limit exceeded'
        '500':
          description: 'Internal server error'
        '502':
          description: 'Bad gateway'
        '503':
          description: 'Service unavailable'
        '504':
          description: 'Gateway timeout'
      operationId: tournament-v3.registerTournament
      description: 'Creates a tournament and returns its ID.'
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          required: true
          description: 'The tournament definition.'
          schema:
            $ref: '#/definitions/tournament-v3.TournamentRegistrationParameters'
            x-type: TournamentRegistrationParameters
          in: body
          name: TournamentRegistrationParameters
definitions:
  Error:
    type: object
    properties:
      status:
        type: object
        properties:
          status_code:
            type: integer
          message:
            type: string
  champion-mastery-v3.ChampionMasteryDTO:
    type: object
    title: ChampionMasteryDTO
    properties:
      chestGranted:
        type: boolean
        x-type: boolean
        description: 'Is chest granted for this champion or not in current season.'
      championLevel:
        type: integer
        format: int32
        x-type: int
        description: 'Champion level for specified player and champion combination.'
      championPoints:
        type: integer
        format: int32
        x-type: int
        description: 'Total number of champion points for this player and champion combination - they are used to determine championLevel.'
      championId:
        type: integer
        format: int64
        x-type: long
        description: 'Champion ID for this entry.'
      playerId:
        type: integer
        format: int64
        x-type: long
        description: 'Player ID for this entry.'
      championPointsUntilNextLevel:
        type: integer
        format: int64
        x-type: long
        description: 'Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion.'
      tokensEarned:
        type: integer
        format: int32
        x-type: int
        description: 'The token earned for this champion to levelup.'
      championPointsSinceLastLevel:
        type: integer
        format: int64
        x-type: long
        description: 'Number of points earned since current level has been achieved.'
      lastPlayTime:
        type: integer
        format: int64
        x-type: long
        description: 'Last time this champion was played by this player - in Unix milliseconds time format.'
    description: 'This object contains single Champion Mastery information for player and champion combination.'
  champion-v3.ChampionInfo:
    type: object
    title: ChampionInfo
    properties:
      freeChampionIdsForNewPlayers:
        type: array
        items:
          type: integer
          format: int32
          x-type: int
        x-type: 'List[int]'
      freeChampionIds:
        type: array
        items:
          type: integer
          format: int32
          x-type: int
        x-type: 'List[int]'
      maxNewPlayerLevel:
        type: integer
        format: int32
        x-type: int
  league-v3.LeagueListDTO:
    type: object
    title: LeagueListDTO
    properties:
      leagueId:
        type: string
        x-type: string
      tier:
        type: string
        x-type: string
      entries:
        type: array
        items:
          $ref: '#/definitions/league-v3.LeaguePositionDTO'
          x-type: LeagueItemDTO
        x-type: 'List[LeagueItemDTO]'
      queue:
        type: string
        x-type: string
      name:
        type: string
        x-type: string
  league-v3.MiniSeriesDTO:
    type: object
    title: MiniSeriesDTO
    properties:
      wins:
        type: integer
        format: int32
        x-type: int
      losses:
        type: integer
        format: int32
        x-type: int
      target:
        type: integer
        format: int32
        x-type: int
      progress:
        type: string
        x-type: string
  league-v3.LeaguePositionDTO:
    type: object
    title: LeaguePositionDTO
    properties:
      rank:
        type: string
        x-type: string
      queueType:
        type: string
        x-type: string
      hotStreak:
        type: boolean
        x-type: boolean
      miniSeries:
        $ref: '#/definitions/league-v3.MiniSeriesDTO'
        x-type: MiniSeriesDTO
      wins:
        type: integer
        format: int32
        x-type: int
      veteran:
        type: boolean
        x-type: boolean
      losses:
        type: integer
        format: int32
        x-type: int
      freshBlood:
        type: boolean
        x-type: boolean
      leagueId:
        type: string
        x-type: string
      playerOrTeamName:
        type: string
        x-type: string
      inactive:
        type: boolean
        x-type: boolean
      playerOrTeamId:
        type: string
        x-type: string
      leagueName:
        type: string
        x-type: string
      tier:
        type: string
        x-type: string
      leaguePoints:
        type: integer
        format: int32
        x-type: int
  lol-status-v3.ShardStatus:
    type: object
    title: ShardStatus
    properties:
      name:
        type: string
        x-type: string
      region_tag:
        type: string
        x-type: string
      hostname:
        type: string
        x-type: string
      services:
        type: array
        items:
          $ref: '#/definitions/lol-status-v3.Service'
          x-type: Service
        x-type: 'List[Service]'
      slug:
        type: string
        x-type: string
      locales:
        type: array
        items:
          type: string
          x-type: string
        x-type: 'List[string]'
  lol-status-v3.Service:
    type: object
    title: Service
    properties:
      status:
        type: string
        x-type: string
      incidents:
        type: array
        items:
          $ref: '#/definitions/lol-status-v3.Incident'
          x-type: Incident
        x-type: 'List[Incident]'
      name:
        type: string
        x-type: string
      slug:
        type: string
        x-type: string
  lol-status-v3.Incident:
    type: object
    title: Incident
    properties:
      active:
        type: boolean
        x-type: boolean
      created_at:
        type: string
        x-type: string
      id:
        type: integer
        format: int64
        x-type: long
      updates:
        type: array
        items:
          $ref: '#/definitions/lol-status-v3.Message'
          x-type: Message
        x-type: 'List[Message]'
  lol-status-v3.Message:
    type: object
    title: Message
    properties:
      severity:
        type: string
        x-type: string
      author:
        type: string
        x-type: string
      created_at:
        type: string
        x-type: string
      translations:
        type: array
        items:
          $ref: '#/definitions/lol-status-v3.Translation'
          x-type: Translation
        x-type: 'List[Translation]'
      updated_at:
        type: string
        x-type: string
      content:
        type: string
        x-type: string
      id:
        type: string
        x-type: string
  lol-status-v3.Translation:
    type: object
    title: Translation
    properties:
      locale:
        type: string
        x-type: string
      content:
        type: string
        x-type: string
      updated_at:
        type: string
        x-type: string
  match-v3.MatchDto:
    type: object
    title: MatchDto
    properties:
      seasonId:
        type: integer
        format: int32
        x-type: int
        description: 'Please refer to the Game Constants documentation.'
      queueId:
        type: integer
        format: int32
        x-type: int
        description: 'Please refer to the Game Constants documentation.'
      gameId:
        type: integer
        format: int64
        x-type: long
      participantIdentities:
        type: array
        items:
          $ref: '#/definitions/match-v3.ParticipantIdentityDto'
          x-type: ParticipantIdentityDto
        x-type: 'List[ParticipantIdentityDto]'
        description: 'Participant identity information.'
      gameVersion:
        type: string
        x-type: string
        description: 'The major.minor version typically indicates the patch the match was played on.'
      platformId:
        type: string
        x-type: string
        description: 'Platform where the match was played.'
      gameMode:
        type: string
        x-type: string
        description: 'Please refer to the Game Constants documentation.'
      mapId:
        type: integer
        format: int32
        x-type: int
        description: 'Please refer to the Game Constants documentation.'
      gameType:
        type: string
        x-type: string
        description: 'Please refer to the Game Constants documentation.'
      teams:
        type: array
        items:
          $ref: '#/definitions/match-v3.TeamStatsDto'
          x-type: TeamStatsDto
        x-type: 'List[TeamStatsDto]'
        description: 'Team information.'
      participants:
        type: array
        items:
          $ref: '#/definitions/match-v3.ParticipantDto'
          x-type: ParticipantDto
        x-type: 'List[ParticipantDto]'
        description: 'Participant information.'
      gameDuration:
        type: integer
        format: int64
        x-type: long
        description: 'Match duration in seconds.'
      gameCreation:
        type: integer
        format: int64
        x-type: long
        description: 'Designates the timestamp when champion select ended and the loading screen appeared, NOT when the game timer was at 0:00.'
  match-v3.ParticipantIdentityDto:
    type: object
    title: ParticipantIdentityDto
    properties:
      player:
        $ref: '#/definitions/match-v3.PlayerDto'
        x-type: PlayerDto
        description: 'Player information.'
      participantId:
        type: integer
        format: int32
        x-type: int
  match-v3.PlayerDto:
    type: object
    title: PlayerDto
    properties:
      currentPlatformId:
        type: string
        x-type: string
      summonerName:
        type: string
        x-type: string
      matchHistoryUri:
        type: string
        x-type: string
      platformId:
        type: string
        x-type: string
        description: 'Original platformId.'
      currentAccountId:
        type: integer
        format: int64
        x-type: long
      profileIcon:
        type: integer
        format: int32
        x-type: int
      summonerId:
        type: integer
        format: int64
        x-type: long
      accountId:
        type: integer
        format: int64
        x-type: long
        description: 'Original accountId.'
  match-v3.TeamStatsDto:
    type: object
    title: TeamStatsDto
    properties:
      firstDragon:
        type: boolean
        x-type: boolean
        description: 'Flag indicating whether or not the team scored the first Dragon kill.'
      firstInhibitor:
        type: boolean
        x-type: boolean
        description: 'Flag indicating whether or not the team destroyed the first inhibitor.'
      bans:
        type: array
        items:
          $ref: '#/definitions/match-v3.TeamBansDto'
          x-type: TeamBansDto
        x-type: 'List[TeamBansDto]'
        description: 'If match queueId has a draft, contains banned champion data, otherwise empty.'
      baronKills:
        type: integer
        format: int32
        x-type: int
        description: 'Number of times the team killed Baron.'
      firstRiftHerald:
        type: boolean
        x-type: boolean
        description: 'Flag indicating whether or not the team scored the first Rift Herald kill.'
      firstBaron:
        type: boolean
        x-type: boolean
        description: 'Flag indicating whether or not the team scored the first Baron kill.'
      riftHeraldKills:
        type: integer
        format: int32
        x-type: int
        description: 'Number of times the team killed Rift Herald.'
      firstBlood:
        type: boolean
        x-type: boolean
        description: 'Flag indicating whether or not the team scored the first blood.'
      teamId:
        type: integer
        format: int32
        x-type: int
        description: '100 for blue side. 200 for red side.'
      firstTower:
        type: boolean
        x-type: boolean
        description: 'Flag indicating whether or not the team destroyed the first tower.'
      vilemawKills:
        type: integer
        format: int32
        x-type: int
        description: 'Number of times the team killed Vilemaw.'
      inhibitorKills:
        type: integer
        format: int32
        x-type: int
        description: 'Number of inhibitors the team destroyed.'
      towerKills:
        type: integer
        format: int32
        x-type: int
        description: 'Number of towers the team destroyed.'
      dominionVictoryScore:
        type: integer
        format: int32
        x-type: int
        description: 'For Dominion matches, specifies the points the team had at game end.'
      win:
        type: string
        x-type: string
        enum:
          - Fail
          - Win
        description: "String indicating whether or not the team won. There are only two values visibile in public match history.\n             (Legal values:  Fail,  Win)"
      dragonKills:
        type: integer
        format: int32
        x-type: int
        description: 'Number of times the team killed Dragon.'
  match-v3.TeamBansDto:
    type: object
    title: TeamBansDto
    properties:
      pickTurn:
        type: integer
        format: int32
        x-type: int
        description: 'Turn during which the champion was banned.'
      championId:
        type: integer
        format: int32
        x-type: int
        description: 'Banned championId.'
  match-v3.ParticipantDto:
    type: object
    title: ParticipantDto
    properties:
      stats:
        $ref: '#/definitions/match-v3.ParticipantStatsDto'
        x-type: ParticipantStatsDto
        description: 'Participant statistics.'
      participantId:
        type: integer
        format: int32
        x-type: int
      runes:
        type: array
        items:
          $ref: '#/definitions/match-v3.RuneDto'
          x-type: RuneDto
        x-type: 'List[RuneDto]'
        description: 'List of legacy Rune information. Not included for matches played with Runes Reforged.'
      timeline:
        $ref: '#/definitions/match-v3.ParticipantTimelineDto'
        x-type: ParticipantTimelineDto
        description: 'Participant timeline data.'
      teamId:
        type: integer
        format: int32
        x-type: int
        description: '100 for blue side. 200 for red side.'
      spell2Id:
        type: integer
        format: int32
        x-type: int
        description: 'Second Summoner Spell id.'
      masteries:
        type: array
        items:
          $ref: '#/definitions/match-v3.MasteryDto'
          x-type: MasteryDto
        x-type: 'List[MasteryDto]'
        description: 'List of legacy Mastery information. Not included for matches played with Runes Reforged.'
      highestAchievedSeasonTier:
        type: string
        x-type: string
        enum:
          - CHALLENGER
          - MASTER
          - DIAMOND
          - PLATINUM
          - GOLD
          - SILVER
          - BRONZE
          - UNRANKED
        description: "Highest ranked tier achieved for the previous season in a specific subset of queueIds, if any, otherwise null. Used to display border in game loading screen. Please refer to the Ranked Info documentation.\n             (Legal values:  CHALLENGER,  MASTER,  DIAMOND,  PLATINUM,  GOLD,  SILVER,  BRONZE,  UNRANKED)"
      spell1Id:
        type: integer
        format: int32
        x-type: int
        description: 'First Summoner Spell id.'
      championId:
        type: integer
        format: int32
        x-type: int
  match-v3.ParticipantStatsDto:
    type: object
    title: ParticipantStatsDto
    properties:
      firstBloodAssist:
        type: boolean
        x-type: boolean
      visionScore:
        type: integer
        format: int64
        x-type: long
      magicDamageDealtToChampions:
        type: integer
        format: int64
        x-type: long
      damageDealtToObjectives:
        type: integer
        format: int64
        x-type: long
      totalTimeCrowdControlDealt:
        type: integer
        format: int32
        x-type: int
      longestTimeSpentLiving:
        type: integer
        format: int32
        x-type: int
      perk1Var1:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      perk1Var3:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      perk1Var2:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      tripleKills:
        type: integer
        format: int32
        x-type: int
      perk3Var3:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      nodeNeutralizeAssist:
        type: integer
        format: int32
        x-type: int
      perk3Var2:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      playerScore9:
        type: integer
        format: int32
        x-type: int
      playerScore8:
        type: integer
        format: int32
        x-type: int
      kills:
        type: integer
        format: int32
        x-type: int
      playerScore1:
        type: integer
        format: int32
        x-type: int
      playerScore0:
        type: integer
        format: int32
        x-type: int
      playerScore3:
        type: integer
        format: int32
        x-type: int
      playerScore2:
        type: integer
        format: int32
        x-type: int
      playerScore5:
        type: integer
        format: int32
        x-type: int
      playerScore4:
        type: integer
        format: int32
        x-type: int
      playerScore7:
        type: integer
        format: int32
        x-type: int
      playerScore6:
        type: integer
        format: int32
        x-type: int
      perk5Var1:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      perk5Var3:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      perk5Var2:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      totalScoreRank:
        type: integer
        format: int32
        x-type: int
      neutralMinionsKilled:
        type: integer
        format: int32
        x-type: int
      damageDealtToTurrets:
        type: integer
        format: int64
        x-type: long
      physicalDamageDealtToChampions:
        type: integer
        format: int64
        x-type: long
      nodeCapture:
        type: integer
        format: int32
        x-type: int
      largestMultiKill:
        type: integer
        format: int32
        x-type: int
      perk2Var2:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      perk2Var3:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      totalUnitsHealed:
        type: integer
        format: int32
        x-type: int
      perk2Var1:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      perk4Var1:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      perk4Var2:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      perk4Var3:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      wardsKilled:
        type: integer
        format: int32
        x-type: int
      largestCriticalStrike:
        type: integer
        format: int32
        x-type: int
      largestKillingSpree:
        type: integer
        format: int32
        x-type: int
      quadraKills:
        type: integer
        format: int32
        x-type: int
      teamObjective:
        type: integer
        format: int32
        x-type: int
      magicDamageDealt:
        type: integer
        format: int64
        x-type: long
      item2:
        type: integer
        format: int32
        x-type: int
      item3:
        type: integer
        format: int32
        x-type: int
      item0:
        type: integer
        format: int32
        x-type: int
      neutralMinionsKilledTeamJungle:
        type: integer
        format: int32
        x-type: int
      item6:
        type: integer
        format: int32
        x-type: int
      item4:
        type: integer
        format: int32
        x-type: int
      item5:
        type: integer
        format: int32
        x-type: int
      perk1:
        type: integer
        format: int32
        x-type: int
        description: 'Primary path rune.'
      perk0:
        type: integer
        format: int32
        x-type: int
        description: 'Primary path keystone rune.'
      perk3:
        type: integer
        format: int32
        x-type: int
        description: 'Primary path rune.'
      perk2:
        type: integer
        format: int32
        x-type: int
        description: 'Primary path rune.'
      perk5:
        type: integer
        format: int32
        x-type: int
        description: 'Secondary path rune.'
      perk4:
        type: integer
        format: int32
        x-type: int
        description: 'Secondary path rune.'
      perk3Var1:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      damageSelfMitigated:
        type: integer
        format: int64
        x-type: long
      magicalDamageTaken:
        type: integer
        format: int64
        x-type: long
      firstInhibitorKill:
        type: boolean
        x-type: boolean
      trueDamageTaken:
        type: integer
        format: int64
        x-type: long
      nodeNeutralize:
        type: integer
        format: int32
        x-type: int
      assists:
        type: integer
        format: int32
        x-type: int
      combatPlayerScore:
        type: integer
        format: int32
        x-type: int
      perkPrimaryStyle:
        type: integer
        format: int32
        x-type: int
        description: 'Primary rune path'
      goldSpent:
        type: integer
        format: int32
        x-type: int
      trueDamageDealt:
        type: integer
        format: int64
        x-type: long
      participantId:
        type: integer
        format: int32
        x-type: int
      totalDamageTaken:
        type: integer
        format: int64
        x-type: long
      physicalDamageDealt:
        type: integer
        format: int64
        x-type: long
      sightWardsBoughtInGame:
        type: integer
        format: int32
        x-type: int
      totalDamageDealtToChampions:
        type: integer
        format: int64
        x-type: long
      physicalDamageTaken:
        type: integer
        format: int64
        x-type: long
      totalPlayerScore:
        type: integer
        format: int32
        x-type: int
      win:
        type: boolean
        x-type: boolean
      objectivePlayerScore:
        type: integer
        format: int32
        x-type: int
      totalDamageDealt:
        type: integer
        format: int64
        x-type: long
      item1:
        type: integer
        format: int32
        x-type: int
      neutralMinionsKilledEnemyJungle:
        type: integer
        format: int32
        x-type: int
      deaths:
        type: integer
        format: int32
        x-type: int
      wardsPlaced:
        type: integer
        format: int32
        x-type: int
      perkSubStyle:
        type: integer
        format: int32
        x-type: int
        description: 'Secondary rune path'
      turretKills:
        type: integer
        format: int32
        x-type: int
      firstBloodKill:
        type: boolean
        x-type: boolean
      trueDamageDealtToChampions:
        type: integer
        format: int64
        x-type: long
      goldEarned:
        type: integer
        format: int32
        x-type: int
      killingSprees:
        type: integer
        format: int32
        x-type: int
      unrealKills:
        type: integer
        format: int32
        x-type: int
      altarsCaptured:
        type: integer
        format: int32
        x-type: int
      firstTowerAssist:
        type: boolean
        x-type: boolean
      firstTowerKill:
        type: boolean
        x-type: boolean
      champLevel:
        type: integer
        format: int32
        x-type: int
      doubleKills:
        type: integer
        format: int32
        x-type: int
      nodeCaptureAssist:
        type: integer
        format: int32
        x-type: int
      inhibitorKills:
        type: integer
        format: int32
        x-type: int
      firstInhibitorAssist:
        type: boolean
        x-type: boolean
      perk0Var1:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      perk0Var2:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      perk0Var3:
        type: integer
        format: int32
        x-type: int
        description: 'Post game rune stats.'
      visionWardsBoughtInGame:
        type: integer
        format: int32
        x-type: int
      altarsNeutralized:
        type: integer
        format: int32
        x-type: int
      pentaKills:
        type: integer
        format: int32
        x-type: int
      totalHeal:
        type: integer
        format: int64
        x-type: long
      totalMinionsKilled:
        type: integer
        format: int32
        x-type: int
      timeCCingOthers:
        type: integer
        format: int64
        x-type: long
  match-v3.RuneDto:
    type: object
    title: RuneDto
    properties:
      runeId:
        type: integer
        format: int32
        x-type: int
      rank:
        type: integer
        format: int32
        x-type: int
  match-v3.ParticipantTimelineDto:
    type: object
    title: ParticipantTimelineDto
    properties:
      lane:
        type: string
        x-type: string
        enum:
          - MID
          - MIDDLE
          - TOP
          - JUNGLE
          - BOT
          - BOTTOM
        description: "Participant's calculated lane. MID and BOT are legacy values.\n             (Legal values:  MID,  MIDDLE,  TOP,  JUNGLE,  BOT,  BOTTOM)"
      participantId:
        type: integer
        format: int32
        x-type: int
      csDiffPerMinDeltas:
        type: object
        x-key:
          type: string
          x-type: string
        additionalProperties:
          type: number
          format: double
          x-type: double
        x-type: 'Map[string, double]'
        description: 'Creep score difference versus the calculated lane opponent(s) for a specified period.'
      goldPerMinDeltas:
        type: object
        x-key:
          type: string
          x-type: string
        additionalProperties:
          type: number
          format: double
          x-type: double
        x-type: 'Map[string, double]'
        description: 'Gold for a specified period.'
      xpDiffPerMinDeltas:
        type: object
        x-key:
          type: string
          x-type: string
        additionalProperties:
          type: number
          format: double
          x-type: double
        x-type: 'Map[string, double]'
        description: 'Experience difference versus the calculated lane opponent(s) for a specified period.'
      creepsPerMinDeltas:
        type: object
        x-key:
          type: string
          x-type: string
        additionalProperties:
          type: number
          format: double
          x-type: double
        x-type: 'Map[string, double]'
        description: 'Creeps for a specified period.'
      xpPerMinDeltas:
        type: object
        x-key:
          type: string
          x-type: string
        additionalProperties:
          type: number
          format: double
          x-type: double
        x-type: 'Map[string, double]'
        description: 'Experience change for a specified period.'
      role:
        type: string
        x-type: string
        enum:
          - DUO
          - NONE
          - SOLO
          - DUO_CARRY
          - DUO_SUPPORT
        description: "Participant's calculated role.\n             (Legal values:  DUO,  NONE,  SOLO,  DUO_CARRY,  DUO_SUPPORT)"
      damageTakenDiffPerMinDeltas:
        type: object
        x-key:
          type: string
          x-type: string
        additionalProperties:
          type: number
          format: double
          x-type: double
        x-type: 'Map[string, double]'
        description: 'Damage taken difference versus the calculated lane opponent(s) for a specified period.'
      damageTakenPerMinDeltas:
        type: object
        x-key:
          type: string
          x-type: string
        additionalProperties:
          type: number
          format: double
          x-type: double
        x-type: 'Map[string, double]'
        description: 'Damage taken for a specified period.'
  match-v3.MasteryDto:
    type: object
    title: MasteryDto
    properties:
      masteryId:
        type: integer
        format: int32
        x-type: int
      rank:
        type: integer
        format: int32
        x-type: int
  match-v3.MatchlistDto:
    type: object
    title: MatchlistDto
    properties:
      matches:
        type: array
        items:
          $ref: '#/definitions/match-v3.MatchReferenceDto'
          x-type: MatchReferenceDto
        x-type: 'List[MatchReferenceDto]'
      totalGames:
        type: integer
        format: int32
        x-type: int
      startIndex:
        type: integer
        format: int32
        x-type: int
      endIndex:
        type: integer
        format: int32
        x-type: int
  match-v3.MatchReferenceDto:
    type: object
    title: MatchReferenceDto
    properties:
      lane:
        type: string
        x-type: string
      gameId:
        type: integer
        format: int64
        x-type: long
      champion:
        type: integer
        format: int32
        x-type: int
      platformId:
        type: string
        x-type: string
      season:
        type: integer
        format: int32
        x-type: int
      queue:
        type: integer
        format: int32
        x-type: int
      role:
        type: string
        x-type: string
      timestamp:
        type: integer
        format: int64
        x-type: long
  match-v3.MatchTimelineDto:
    type: object
    title: MatchTimelineDto
    properties:
      frames:
        type: array
        items:
          $ref: '#/definitions/match-v3.MatchFrameDto'
          x-type: MatchFrameDto
        x-type: 'List[MatchFrameDto]'
      frameInterval:
        type: integer
        format: int64
        x-type: long
  match-v3.MatchFrameDto:
    type: object
    title: MatchFrameDto
    properties:
      timestamp:
        type: integer
        format: int64
        x-type: long
      participantFrames:
        type: object
        x-key:
          type: integer
          format: int32
          x-type: int
        additionalProperties:
          $ref: '#/definitions/match-v3.MatchParticipantFrameDto'
          x-type: MatchParticipantFrameDto
        x-type: 'Map[int, MatchParticipantFrameDto]'
      events:
        type: array
        items:
          $ref: '#/definitions/match-v3.MatchEventDto'
          x-type: MatchEventDto
        x-type: 'List[MatchEventDto]'
  match-v3.MatchParticipantFrameDto:
    type: object
    title: MatchParticipantFrameDto
    properties:
      totalGold:
        type: integer
        format: int32
        x-type: int
      teamScore:
        type: integer
        format: int32
        x-type: int
      participantId:
        type: integer
        format: int32
        x-type: int
      level:
        type: integer
        format: int32
        x-type: int
      currentGold:
        type: integer
        format: int32
        x-type: int
      minionsKilled:
        type: integer
        format: int32
        x-type: int
      dominionScore:
        type: integer
        format: int32
        x-type: int
      position:
        $ref: '#/definitions/match-v3.MatchPositionDto'
        x-type: MatchPositionDto
      xp:
        type: integer
        format: int32
        x-type: int
      jungleMinionsKilled:
        type: integer
        format: int32
        x-type: int
  match-v3.MatchPositionDto:
    type: object
    title: MatchPositionDto
    properties:
      y:
        type: integer
        format: int32
        x-type: int
      x:
        type: integer
        format: int32
        x-type: int
  match-v3.MatchEventDto:
    type: object
    title: MatchEventDto
    properties:
      eventType:
        type: string
        x-type: string
      towerType:
        type: string
        x-type: string
      teamId:
        type: integer
        format: int32
        x-type: int
      ascendedType:
        type: string
        x-type: string
      killerId:
        type: integer
        format: int32
        x-type: int
      levelUpType:
        type: string
        x-type: string
      pointCaptured:
        type: string
        x-type: string
      assistingParticipantIds:
        type: array
        items:
          type: integer
          format: int32
          x-type: int
        x-type: 'List[int]'
      wardType:
        type: string
        x-type: string
      monsterType:
        type: string
        x-type: string
      type:
        type: string
        x-type: string
        enum:
          - CHAMPION_KILL
          - WARD_PLACED
          - WARD_KILL
          - BUILDING_KILL
          - ELITE_MONSTER_KILL
          - ITEM_PURCHASED
          - ITEM_SOLD
          - ITEM_DESTROYED
          - ITEM_UNDO
          - SKILL_LEVEL_UP
          - ASCENDED_EVENT
          - CAPTURE_POINT
          - PORO_KING_SUMMON
        description: '(Legal values:  CHAMPION_KILL,  WARD_PLACED,  WARD_KILL,  BUILDING_KILL,  ELITE_MONSTER_KILL,  ITEM_PURCHASED,  ITEM_SOLD,  ITEM_DESTROYED,  ITEM_UNDO,  SKILL_LEVEL_UP,  ASCENDED_EVENT,  CAPTURE_POINT,  PORO_KING_SUMMON)'
      skillSlot:
        type: integer
        format: int32
        x-type: int
      victimId:
        type: integer
        format: int32
        x-type: int
      timestamp:
        type: integer
        format: int64
        x-type: long
      afterId:
        type: integer
        format: int32
        x-type: int
      monsterSubType:
        type: string
        x-type: string
      laneType:
        type: string
        x-type: string
      itemId:
        type: integer
        format: int32
        x-type: int
      participantId:
        type: integer
        format: int32
        x-type: int
      buildingType:
        type: string
        x-type: string
      creatorId:
        type: integer
        format: int32
        x-type: int
      position:
        $ref: '#/definitions/match-v3.MatchPositionDto'
        x-type: MatchPositionDto
      beforeId:
        type: integer
        format: int32
        x-type: int
  spectator-v3.CurrentGameInfo:
    type: object
    title: CurrentGameInfo
    properties:
      gameId:
        type: integer
        format: int64
        x-type: long
        description: 'The ID of the game'
      gameStartTime:
        type: integer
        format: int64
        x-type: long
        description: 'The game start time represented in epoch milliseconds'
      platformId:
        type: string
        x-type: string
        description: 'The ID of the platform on which the game is being played'
      gameMode:
        type: string
        x-type: string
        description: 'The game mode'
      mapId:
        type: integer
        format: int64
        x-type: long
        description: 'The ID of the map'
      gameType:
        type: string
        x-type: string
        description: 'The game type'
      bannedChampions:
        type: array
        items:
          $ref: '#/definitions/spectator-v3.BannedChampion'
          x-type: BannedChampion
        x-type: 'List[BannedChampion]'
        description: 'Banned champion information'
      observers:
        $ref: '#/definitions/spectator-v3.Observer'
        x-type: Observer
        description: 'The observer information'
      participants:
        type: array
        items:
          $ref: '#/definitions/spectator-v3.CurrentGameParticipant'
          x-type: CurrentGameParticipant
        x-type: 'List[CurrentGameParticipant]'
        description: 'The participant information'
      gameLength:
        type: integer
        format: int64
        x-type: long
        description: 'The amount of time in seconds that has passed since the game started'
      gameQueueConfigId:
        type: integer
        format: int64
        x-type: long
        description: 'The queue type (queue types are documented on the Game Constants page)'
  spectator-v3.BannedChampion:
    type: object
    title: BannedChampion
    properties:
      pickTurn:
        type: integer
        format: int32
        x-type: int
        description: 'The turn during which the champion was banned'
      championId:
        type: integer
        format: int64
        x-type: long
        description: 'The ID of the banned champion'
      teamId:
        type: integer
        format: int64
        x-type: long
        description: 'The ID of the team that banned the champion'
  spectator-v3.Observer:
    type: object
    title: Observer
    properties:
      encryptionKey:
        type: string
        x-type: string
        description: 'Key used to decrypt the spectator grid game data for playback'
  spectator-v3.CurrentGameParticipant:
    type: object
    title: CurrentGameParticipant
    properties:
      profileIconId:
        type: integer
        format: int64
        x-type: long
        description: 'The ID of the profile icon used by this participant'
      championId:
        type: integer
        format: int64
        x-type: long
        description: 'The ID of the champion played by this participant'
      summonerName:
        type: string
        x-type: string
        description: 'The summoner name of this participant'
      gameCustomizationObjects:
        type: array
        items:
          $ref: '#/definitions/spectator-v3.GameCustomizationObject'
          x-type: GameCustomizationObject
        x-type: 'List[GameCustomizationObject]'
        description: 'List of Game Customizations'
      bot:
        type: boolean
        x-type: boolean
        description: 'Flag indicating whether or not this participant is a bot'
      perks:
        $ref: '#/definitions/spectator-v3.Perks'
        x-type: Perks
        description: 'Perks/Runes Reforged Information'
      spell2Id:
        type: integer
        format: int64
        x-type: long
        description: 'The ID of the second summoner spell used by this participant'
      teamId:
        type: integer
        format: int64
        x-type: long
        description: 'The team ID of this participant, indicating the participant''s team'
      spell1Id:
        type: integer
        format: int64
        x-type: long
        description: 'The ID of the first summoner spell used by this participant'
      summonerId:
        type: integer
        format: int64
        x-type: long
        description: 'The summoner ID of this participant'
  spectator-v3.GameCustomizationObject:
    type: object
    title: GameCustomizationObject
    properties:
      category:
        type: string
        x-type: string
        description: 'Category identifier for Game Customization'
      content:
        type: string
        x-type: string
        description: 'Game Customization content'
  spectator-v3.Perks:
    type: object
    title: Perks
    properties:
      perkStyle:
        type: integer
        format: int64
        x-type: long
        description: 'Primary runes path'
      perkIds:
        type: array
        items:
          type: integer
          format: int64
          x-type: Long
        x-type: 'List[Long]'
        description: 'IDs of the perks/runes assigned.'
      perkSubStyle:
        type: integer
        format: int64
        x-type: long
        description: 'Secondary runes path'
  spectator-v3.FeaturedGames:
    type: object
    title: FeaturedGames
    properties:
      clientRefreshInterval:
        type: integer
        format: int64
        x-type: long
        description: 'The suggested interval to wait before requesting FeaturedGames again'
      gameList:
        type: array
        items:
          $ref: '#/definitions/spectator-v3.FeaturedGameInfo'
          x-type: FeaturedGameInfo
        x-type: 'List[FeaturedGameInfo]'
        description: 'The list of featured games'
  spectator-v3.FeaturedGameInfo:
    type: object
    title: FeaturedGameInfo
    properties:
      gameId:
        type: integer
        format: int64
        x-type: long
        description: 'The ID of the game'
      gameStartTime:
        type: integer
        format: int64
        x-type: long
        description: 'The game start time represented in epoch milliseconds'
      platformId:
        type: string
        x-type: string
        description: 'The ID of the platform on which the game is being played'
      gameMode:
        type: string
        x-type: string
        enum:
          - CLASSIC
          - ODIN
          - ARAM
          - TUTORIAL
          - ONEFORALL
          - ASCENSION
          - FIRSTBLOOD
          - KINGPORO
        description: "The game mode\n             (Legal values:  CLASSIC,  ODIN,  ARAM,  TUTORIAL,  ONEFORALL,  ASCENSION,  FIRSTBLOOD,  KINGPORO)"
      mapId:
        type: integer
        format: int64
        x-type: long
        description: 'The ID of the map'
      gameType:
        type: string
        x-type: string
        enum:
          - CUSTOM_GAME
          - MATCHED_GAME
          - TUTORIAL_GAME
        description: "The game type\n             (Legal values:  CUSTOM_GAME,  MATCHED_GAME,  TUTORIAL_GAME)"
      bannedChampions:
        type: array
        items:
          $ref: '#/definitions/spectator-v3.BannedChampion'
          x-type: BannedChampion
        x-type: 'List[BannedChampion]'
        description: 'Banned champion information'
      observers:
        $ref: '#/definitions/spectator-v3.Observer'
        x-type: Observer
        description: 'The observer information'
      participants:
        type: array
        items:
          $ref: '#/definitions/spectator-v3.Participant'
          x-type: Participant
        x-type: 'List[Participant]'
        description: 'The participant information'
      gameLength:
        type: integer
        format: int64
        x-type: long
        description: 'The amount of time in seconds that has passed since the game started'
      gameQueueConfigId:
        type: integer
        format: int64
        x-type: long
        description: 'The queue type (queue types are documented on the Game Constants page)'
  spectator-v3.Participant:
    type: object
    title: Participant
    properties:
      profileIconId:
        type: integer
        format: int64
        x-type: long
        description: 'The ID of the profile icon used by this participant'
      championId:
        type: integer
        format: int64
        x-type: long
        description: 'The ID of the champion played by this participant'
      summonerName:
        type: string
        x-type: string
        description: 'The summoner name of this participant'
      bot:
        type: boolean
        x-type: boolean
        description: 'Flag indicating whether or not this participant is a bot'
      spell2Id:
        type: integer
        format: int64
        x-type: long
        description: 'The ID of the second summoner spell used by this participant'
      teamId:
        type: integer
        format: int64
        x-type: long
        description: 'The team ID of this participant, indicating the participant''s team'
      spell1Id:
        type: integer
        format: int64
        x-type: long
        description: 'The ID of the first summoner spell used by this participant'
  summoner-v3.SummonerDTO:
    type: object
    title: SummonerDTO
    properties:
      profileIconId:
        type: integer
        format: int32
        x-type: int
        description: 'ID of the summoner icon associated with the summoner.'
      name:
        type: string
        x-type: string
        description: 'Summoner name.'
      summonerLevel:
        type: integer
        format: int64
        x-type: long
        description: 'Summoner level associated with the summoner.'
      revisionDate:
        type: integer
        format: int64
        x-type: long
        description: 'Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: profile icon change, playing the tutorial or advanced tutorial, finishing a game, summoner name change'
      id:
        type: integer
        format: int64
        x-type: long
        description: 'Summoner ID.'
      accountId:
        type: integer
        format: int64
        x-type: long
        description: 'Account ID.'
    description: 'represents a summoner'
  tournament-stub-v3.TournamentCodeParameters:
    type: object
    title: TournamentCodeParameters
    properties:
      spectatorType:
        type: string
        x-type: string
        enum:
          - NONE
          - LOBBYONLY
          - ALL
        description: "The spectator type of the game.\n             (Legal values:  NONE,  LOBBYONLY,  ALL)"
      teamSize:
        type: integer
        format: int32
        x-type: int
        minimum: 1
        maximum: 5
        description: 'The team size of the game. Valid values are 1-5.'
      pickType:
        type: string
        x-type: string
        enum:
          - BLIND_PICK
          - DRAFT_MODE
          - ALL_RANDOM
          - TOURNAMENT_DRAFT
        description: "The pick type of the game.\n             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)"
      allowedSummonerIds:
        type: array
        items:
          type: integer
          format: int64
          x-type: long
        x-type: 'Set[long]'
        description: 'Optional list of participants in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.'
      mapType:
        type: string
        x-type: string
        enum:
          - SUMMONERS_RIFT
          - TWISTED_TREELINE
          - HOWLING_ABYSS
        description: "The map type of the game.\n             (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)"
      metadata:
        type: string
        x-type: string
        description: 'Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.'
  tournament-stub-v3.LobbyEventDTOWrapper:
    type: object
    title: LobbyEventDTOWrapper
    properties:
      eventList:
        type: array
        items:
          $ref: '#/definitions/tournament-stub-v3.LobbyEventDTO'
          x-type: LobbyEventDTO
        x-type: 'List[LobbyEventDTO]'
  tournament-stub-v3.LobbyEventDTO:
    type: object
    title: LobbyEventDTO
    properties:
      eventType:
        type: string
        x-type: string
        description: 'The type of event that was triggered'
      summonerId:
        type: string
        x-type: string
        description: 'The summoner that triggered the event'
      timestamp:
        type: string
        x-type: string
        description: 'Timestamp from the event'
  tournament-stub-v3.ProviderRegistrationParameters:
    type: object
    title: ProviderRegistrationParameters
    properties:
      url:
        type: string
        x-type: string
        description: 'The provider''s callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).'
      region:
        type: string
        x-type: string
        enum:
          - BR
          - EUNE
          - EUW
          - JP
          - LAN
          - LAS
          - NA
          - OCE
          - PBE
          - RU
          - TR
        description: "The region in which the provider will be running tournaments.\n             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)"
  tournament-stub-v3.TournamentRegistrationParameters:
    type: object
    title: TournamentRegistrationParameters
    properties:
      providerId:
        type: integer
        format: int32
        x-type: int
        description: 'The provider ID to specify the regional registered provider data to associate this tournament.'
      name:
        type: string
        x-type: string
        description: 'The optional name of the tournament.'
  tournament-v3.TournamentCodeParameters:
    type: object
    title: TournamentCodeParameters
    properties:
      spectatorType:
        type: string
        x-type: string
        enum:
          - NONE
          - LOBBYONLY
          - ALL
        description: "The spectator type of the game.\n             (Legal values:  NONE,  LOBBYONLY,  ALL)"
      teamSize:
        type: integer
        format: int32
        x-type: int
        minimum: 1
        maximum: 5
        description: 'The team size of the game. Valid values are 1-5.'
      pickType:
        type: string
        x-type: string
        enum:
          - BLIND_PICK
          - DRAFT_MODE
          - ALL_RANDOM
          - TOURNAMENT_DRAFT
        description: "The pick type of the game.\n             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)"
      allowedSummonerIds:
        type: array
        items:
          type: integer
          format: int64
          x-type: long
        x-type: 'Set[long]'
        description: 'Optional list of participants in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.'
      mapType:
        type: string
        x-type: string
        enum:
          - SUMMONERS_RIFT
          - TWISTED_TREELINE
          - HOWLING_ABYSS
        description: "The map type of the game.\n             (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)"
      metadata:
        type: string
        x-type: string
        description: 'Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.'
  tournament-v3.TournamentCodeUpdateParameters:
    type: object
    title: TournamentCodeUpdateParameters
    properties:
      spectatorType:
        type: string
        x-type: string
        enum:
          - NONE
          - LOBBYONLY
          - ALL
        description: "The spectator type\n             (Legal values:  NONE,  LOBBYONLY,  ALL)"
      pickType:
        type: string
        x-type: string
        enum:
          - BLIND_PICK
          - DRAFT_MODE
          - ALL_RANDOM
          - TOURNAMENT_DRAFT
        description: "The pick type\n             (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)"
      allowedSummonerIds:
        type: array
        items:
          type: integer
          format: int64
          x-type: long
        x-type: 'Set[long]'
        description: 'Optional list of participants in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.'
      mapType:
        type: string
        x-type: string
        enum:
          - SUMMONERS_RIFT
          - TWISTED_TREELINE
          - HOWLING_ABYSS
        description: "The map type\n             (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)"
  tournament-v3.TournamentCodeDTO:
    type: object
    title: TournamentCodeDTO
    properties:
      map:
        type: string
        x-type: string
        description: 'The game map for the tournament code game'
      code:
        type: string
        x-type: string
        description: 'The tournament code.'
      spectators:
        type: string
        x-type: string
        description: 'The spectator mode for the tournament code game.'
      region:
        type: string
        x-type: string
        enum:
          - BR
          - EUNE
          - EUW
          - JP
          - LAN
          - LAS
          - NA
          - OCE
          - PBE
          - RU
          - TR
        description: "The tournament code's region.\n             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)"
      providerId:
        type: integer
        format: int32
        x-type: int
        description: 'The provider''s ID.'
      teamSize:
        type: integer
        format: int32
        x-type: int
        description: 'The team size for the tournament code game.'
      participants:
        type: array
        items:
          type: integer
          format: int64
          x-type: long
        x-type: 'Set[long]'
      pickType:
        type: string
        x-type: string
        description: 'The pick mode for tournament code game.'
      tournamentId:
        type: integer
        format: int32
        x-type: int
        description: 'The tournament''s ID.'
      lobbyName:
        type: string
        x-type: string
        description: 'The lobby name for the tournament code game.'
      password:
        type: string
        x-type: string
        description: 'The password for the tournament code game.'
      id:
        type: integer
        format: int32
        x-type: int
        description: 'The tournament code''s ID.'
      metaData:
        type: string
        x-type: string
        description: 'The metadata for tournament code.'
  tournament-v3.LobbyEventDTOWrapper:
    type: object
    title: LobbyEventDTOWrapper
    properties:
      eventList:
        type: array
        items:
          $ref: '#/definitions/tournament-v3.LobbyEventDTO'
          x-type: LobbyEventDTO
        x-type: 'List[LobbyEventDTO]'
  tournament-v3.LobbyEventDTO:
    type: object
    title: LobbyEventDTO
    properties:
      eventType:
        type: string
        x-type: string
        description: 'The type of event that was triggered'
      summonerId:
        type: string
        x-type: string
        description: 'The summoner that triggered the event'
      timestamp:
        type: string
        x-type: string
        description: 'Timestamp from the event'
  tournament-v3.ProviderRegistrationParameters:
    type: object
    title: ProviderRegistrationParameters
    properties:
      url:
        type: string
        x-type: string
        description: 'The provider''s callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).'
      region:
        type: string
        x-type: string
        enum:
          - BR
          - EUNE
          - EUW
          - JP
          - LAN
          - LAS
          - NA
          - OCE
          - PBE
          - RU
          - TR
        description: "The region in which the provider will be running tournaments.\n             (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)"
  tournament-v3.TournamentRegistrationParameters:
    type: object
    title: TournamentRegistrationParameters
    properties:
      providerId:
        type: integer
        format: int32
        x-type: int
        description: 'The provider ID to specify the regional registered provider data to associate this tournament.'
      name:
        type: string
        x-type: string
        description: 'The optional name of the tournament.'
securityDefinitions:
  api_key:
    type: apiKey
    description: 'API key in query param.'
    name: api_key
    in: query
  X-Riot-Token:
    type: apiKey
    description: 'API key in header.'
    name: X-Riot-Token
    in: header
security:
  -
    api_key: []
  -
    X-Riot-Token: []
